Logging Strategy

 This document describes the strategy chosen for logging in TestLink Java 
 API. The API utilizes {{{http://download.oracle.com/javase/1.4.2/docs/api/java/util/logging/package-summary.html}java.util.logging API}} 
 as its Logging API and it can be configured as follows: 
 
+---+
############################################################
#  	tap4j logging configuration file
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

handlers=java.util.logging.ConsoleHandler
java.util.logging.ConsoleHandler.level=ALL
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

############################################################
#  	Default logging level
############################################################
.level=ALL

############################################################
#  	Suppressing Http API's messages.
############################################################
httpclient.wire.level=SEVERE
org.apache.commons.httpclient.level=SEVERE

############################################################
#  	TestLink Java API messages.
############################################################
br.eti.kinoshita.testlinkjavaapi.level=ALL 
+---+
 
 The default properties are loaded from the Java JRE. The API however logs only 
 WARNING messages in case of internal errors and debug information to the FINE 
 level. In order to change it you need either specify the location of 
 logging.properties using -Djava.util.logging.config.file=myfile when you run 
 your program or programmatic, as the following code snippet shows.
 
+---+
try
{
	LogManager.getLogManager().readConfiguration(getClass().getClassLoader().getResourceAsStream("logging.properties"));
} 
catch (SecurityException e)
{
	e.printStackTrace();
} 
catch (IOException e)
{
	e.printStackTrace();
}
+---+
 
* Log Levels

** WARNING level

 The API logs to the WARNING level only when the server responds with an 
 unparsable XML message.
 
** FINE level

 The request and response objects are logged in this level. It is useful 
 specially when you want to check if your request parameters are correct or 
 if you want to see what is the server response like.

** Changing the Log Level
 
 This log level can be changed during runtime. You can do as follows to 
 change the level from its default value (INFO) to FINE, for example.

+---+
Logger logger = Logger.getLogger(TestLinkAPI.class.getPackage().getName());
logger.setLevel(Level.FINE);
+---+

* Output handlers

 TestLink Java API uses only the console output handler. But you can configure 
 java.util.logging API to output to a File with Log Rotation enabled using 
 the following example.

+---+
.handlers = java.util.logging.FileHandler 
.level=FINE 
 
java.util.logging.FileHandler.level = FINE 
java.util.logging.FileHandler.pattern = /logs/testlinkjavaapi.%g.log 
java.util.logging.FileHandler.limit = 2000000 
java.util.logging.FileHandler.count = 5 
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
+---+

* Final notes

 Observe there is no messages being logged as SEVERE, as the API use is 
 discrete and not continuous, thus it is hard to find a kind of message to 
 be put in this level.